"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Search, Send, Loader2, MessageSquare } from "lucide-react";
import { formatDate } from "@/lib/utils";
import { toast } from "sonner";
import { cn } from "@/lib/utils";

// Helper function to format time
const formatTime = (date: Date): string => {
  return new Intl.DateTimeFormat('id-ID', {
    hour: '2-digit',
    minute: '2-digit',
  }).format(date);
};

interface Contact {
  id: string;
  name: string;
  phoneNumber: string;
  avatar?: string;
  lastMessage?: string;
  lastMessageTime?: Date;
  unreadCount?: number;
}

interface Message {
  id: string;
  content: string;
  timestamp: Date;
  isSent: boolean;
  status: "sent" | "delivered" | "read" | "failed";
}

// Mock data for contacts
const mockContacts: Contact[] = [
  {
    id: "1",
    name: "John Doe",
    phoneNumber: "+6281234567890",
    avatar: "https://github.com/shadcn.png",
    lastMessage: "Hello, how are you?",
    lastMessageTime: new Date(),
    unreadCount: 2,
  },
  {
    id: "2",
    name: "Jane Smith",
    phoneNumber: "+6289876543210",
    lastMessage: "Can we meet tomorrow?",
    lastMessageTime: new Date(Date.now() - 3600000),
  },
  // Add more mock contacts as needed
];

// Mock data for messages
const mockMessages: Record<string, Message[]> = {
  "1": [
    {
      id: "1",
      content: "Hello, how are you?",
      timestamp: new Date(Date.now() - 3600000),
      isSent: false,
      status: "read",
    },
    {
      id: "2",
      content: "I'm good, thanks! How about you?",
      timestamp: new Date(Date.now() - 3500000),
      isSent: true,
      status: "read",
    },
  ],
  "2": [
    {
      id: "1",
      content: "Can we meet tomorrow?",
      timestamp: new Date(Date.now() - 7200000),
      isSent: false,
      status: "read",
    },
    {
      id: "2",
      content: "Sure, what time works for you?",
      timestamp: new Date(Date.now() - 7100000),
      isSent: true,
      status: "read",
    },
  ],
};

export default function WhatsAppChatPage() {
  const [contacts, setContacts] = useState<Contact[]>(mockContacts);
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [isSending, setIsSending] = useState(false);

  useEffect(() => {
    if (selectedContact) {
      setMessages(mockMessages[selectedContact.id] || []);
    }
  }, [selectedContact]);

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedContact || isSending) return;

    setIsSending(true);
    const messageContent = newMessage.trim();

    try {
      const response = await fetch("/api/whatsapp/send", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          phoneNumber: selectedContact.phoneNumber,
          message: messageContent,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to send message");
      }

      const newMessageObj: Message = {
        id: Date.now().toString(),
        content: messageContent,
        timestamp: new Date(),
        isSent: true,
        status: "sent",
      };

      setMessages((prev) => [...prev, newMessageObj]);
      setNewMessage("");
    } catch (error) {
      console.error("Error sending message:", error);
      toast.error("Failed to send message");
    } finally {
      setIsSending(false);
    }
  };

  const filteredContacts = contacts.filter((contact) =>
    contact.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="h-[calc(100vh-14rem)] p-1">
      <div className="h-full rounded-lg border bg-white/20 dark:bg-white/5 backdrop-blur-xl border-white/30 dark:border-white/10 shadow-lg">
        <div className="flex h-full">
          {/* Sidebar */}
          <div className="w-72 border-r border-white/20 dark:border-white/10 p-2 flex flex-col">
            <div className="mb-2">
              <Input
                placeholder="Search contacts..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="bg-white/10 dark:bg-black/20 border-white/20 dark:border-white/10"
              />
            </div>
            <ScrollArea className="flex-1">
              <div className="space-y-1 pr-2">
                {filteredContacts.map((contact) => (
                  <div
                    key={contact.id}
                    className={cn(
                      "flex items-center gap-2 rounded-md p-2 cursor-pointer hover:bg-white/10 dark:hover:bg-white/5 transition-colors",
                      selectedContact?.id === contact.id && "bg-white/10 dark:bg-white/5"
                    )}
                    onClick={() => setSelectedContact(contact)}
                  >
                    <Avatar className="h-8 w-8 border border-white/20">
                      <AvatarFallback>
                        {contact.name.substring(0, 2).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <div className="flex justify-between items-start">
                        <p className="font-medium text-sm truncate">
                          {contact.name}
                        </p>
                        {contact.lastMessageTime && (
                          <p className="text-xs text-muted-foreground">
                            {formatTime(contact.lastMessageTime)}
                          </p>
                        )}
                      </div>
                      <div className="flex justify-between items-center">
                        {contact.lastMessage && (
                          <p className="text-xs text-muted-foreground truncate">
                            {contact.lastMessage}
                          </p>
                        )}
                        {contact.unreadCount ? (
                          <div className="bg-primary text-primary-foreground rounded-full text-xs flex items-center justify-center w-5 h-5">
                            {contact.unreadCount}
                          </div>
                        ) : null}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </div>

          {/* Chat Area */}
          <div className="flex-1 flex flex-col bg-white/5 dark:bg-black/10 backdrop-blur-sm">
            {selectedContact ? (
              <>
                <div className="border-b border-white/20 dark:border-white/10 p-2">
                  <div className="flex items-center gap-2">
                    <Avatar className="h-8 w-8 border border-white/20">
                      <AvatarFallback>
                        {selectedContact.name.substring(0, 2).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <p className="font-medium text-sm">{selectedContact.name}</p>
                      <p className="text-xs text-muted-foreground">
                        {selectedContact.phoneNumber}
                      </p>
                    </div>
                  </div>
                </div>

                <ScrollArea className="flex-1 p-2">
                  <div className="space-y-2">
                    {messages.map((message, index) => (
                      <div
                        key={index}
                        className={cn(
                          "flex",
                          message.isSent ? "justify-end" : "justify-start"
                        )}
                      >
                        <div
                          className={cn(
                            "max-w-[70%] rounded-lg p-2",
                            message.isSent
                              ? "bg-primary/90 text-primary-foreground backdrop-blur-sm"
                              : "bg-white/15 dark:bg-white/10 backdrop-blur-sm border border-white/10"
                          )}
                        >
                          <p className="text-sm">{message.content}</p>
                          <p
                            className={cn(
                              "text-xs mt-1",
                              message.isSent
                                ? "text-primary-foreground/70"
                                : "text-muted-foreground"
                            )}
                          >
                            {formatDate(message.timestamp)}
                            {message.isSent && (
                              <span className="ml-1">
                                {message.status === "sent" && "✓"}
                                {message.status === "delivered" && "✓✓"}
                                {message.status === "read" && (
                                  <span className="text-blue-400">✓✓</span>
                                )}
                                {message.status === "failed" && (
                                  <span className="text-red-400">!</span>
                                )}
                              </span>
                            )}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>

                <div className="border-t border-white/20 dark:border-white/10 p-2">
                  <div className="flex gap-2">
                    <Input
                      placeholder="Type a message..."
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
                      className="bg-white/10 dark:bg-black/20 border-white/20 dark:border-white/10"
                    />
                    <Button 
                      onClick={handleSendMessage} 
                      disabled={isSending || !newMessage.trim()}
                      className="bg-primary/90 hover:bg-primary/80 backdrop-blur-sm"
                    >
                      {isSending ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
              </>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center space-y-4 p-4 max-w-md">
                  <MessageSquare className="h-12 w-12 mx-auto text-muted-foreground" />
                  <h3 className="text-xl font-medium">No conversation selected</h3>
                  <p className="text-muted-foreground">
                    Choose a contact from the sidebar to start messaging
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
} 