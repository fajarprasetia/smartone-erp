generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String
  email              String            @unique
  password           String
  roleId             String
  isActive           Boolean           @default(true)
  otherConsumables   OtherConsumable[] @relation("UserAddedConsumable")
  role               Role              @relation(fields: [roleId], references: [id])
  inkLogs            InkLog[]          @relation("UserInkLogs")
  inkApprovals       InkRequest[]      @relation("UserApprovedInk")
  inkRejections      InkRequest[]      @relation("UserRejectedInk")
  inkRequests        InkRequest[]      @relation("UserRequestedInk")
  inkStocksAdded     InkStock[]        @relation("UserAddedInk")
  inkStocksTaken     InkStock[]        @relation("UserTookInk")
  inkStocksUpdated   InkStock[]        @relation("UserUpdatedInk")
  ordersCutting      Order[]           @relation("OrderCutting")
  ordersDesigned     Order[]           @relation("OrderDesigner")
  ordersDTF          Order[]           @relation("OrderDTF")
  ordersManaged      Order[]           @relation("OrderManager")
  ordersOperated     Order[]           @relation("OrderOperator")
  ordersHandled      Order[]           @relation("OrderPenyerahan")
  ordersPress        Order[]           @relation("OrderPress")
  ordersPrint        Order[]           @relation("OrderPrint")
  ordersCreated      Order[]           @relation("UserCreatedOrders")
  paperLogs          PaperLog[]
  paperApprovals     PaperRequest[]    @relation("UserApprovedPaper")
  paperRejections    PaperRequest[]    @relation("UserRejectedPaper")
  paperRequests      PaperRequest[]    @relation("UserRequestedPaper")
  paperStocksAdded   PaperStock[]      @relation("UserAddedPaper")
  paperStocksTaken   PaperStock[]      @relation("UserTookPaper")
  paperStocksUpdated PaperStock[]      @relation("UserUpdatedPaper")
  othersItemsAdded   OthersItem[]      @relation("UserAddedOthersItem")
  othersItemsTaken   OthersItem[]      @relation("UserTookOthersItem")
  othersLogs         OthersLog[]       @relation("UserOthersLogs")
  othersRequests     OthersRequest[]   @relation("UserRequestedOthers")
  othersApprovals    OthersRequest[]   @relation("UserApprovedOthers")
  othersRejections   OthersRequest[]   @relation("UserRejectedOthers")
}

model Role {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  isSystem       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isAdmin        Boolean         @default(false)
  users          User[]
  dashboardCards DashboardCard[] @relation("DashboardCardRoles")
  permissions    Permission[]    @relation("PermissionToRole")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")
}

model DashboardCard {
  id          String   @id @default(cuid())
  title       String
  description String?
  component   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  roles       Role[]   @relation("DashboardCardRoles")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model customer {
  id           BigInt        @id @default(autoincrement())
  nama         String        @db.VarChar(255)
  telp         String?       @db.VarChar(255)
  chatMessages ChatMessage[]
  inventories  inventory[]   @relation("InventoryCustomer")
  asalBahanFor Order[]       @relation("AsalBahanCustomer")
  orders       Order[]       @relation("CustomerOrders")

  @@map("customer")
}

model inventory {
  id             BigInt    @id @default(autoincrement())
  nama_bahan     String?   @db.VarChar(255)
  lebar_bahan    String?   @db.VarChar(255)
  berat_bahan    String?   @db.VarChar(255)
  est_pjg_bahan  String?   @db.VarChar(255)
  tanggal        DateTime? @db.Date
  foto           String?   @db.VarChar(255)
  roll           String?   @db.VarChar(255)
  keterangan     String?
  asal_bahan     BigInt?   @map("asal_bahan")
  asal_bahan_rel customer? @relation("InventoryCustomer", fields: [asal_bahan], references: [id])
}

model ChatMessage {
  id                String   @id @default(cuid())
  content           String
  isIncoming        Boolean  @default(true)
  timestamp         DateTime @default(now())
  status            String?
  messageType       String   @default("text")
  mediaUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  metadata          String?
  whatsappMessageId String?
  customerId        BigInt
  customer          customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model WhatsAppTemplate {
  id         String   @id @default(cuid())
  name       String
  language   String   @default("en")
  components Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model WhatsAppConfig {
  id                 String    @id @default(cuid())
  apiKey             String?
  phoneNumberId      String?
  businessAccountId  String?
  accessToken        String?
  webhookVerifyToken String?
  status             String    @default("disconnected")
  lastChecked        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
}

model FinancialTransaction {
  id          String   @id @default(cuid())
  type        String
  amount      Float
  description String?
  category    String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Order {
  id               String    @id @default(cuid())
  tanggal          DateTime? @db.Date
  spk              String?   @db.VarChar(255)
  reject           String?   @db.VarChar(255)
  panjang_reject   String?   @db.VarChar(255)
  panjang_order    String?   @db.VarChar(255)
  lebar_kertas     String?   @db.VarChar(255)
  marketing        String?   @db.VarChar(255)
  nominal          String?   @db.VarChar(255)
  harga_satuan     String?   @db.VarChar(255)
  keterangan       String?   @db.VarChar(255)
  invoice          String?   @db.VarChar(255)
  jenis_pembayaran String?   @db.VarChar(255)
  dp               String?   @db.VarChar(255)
  tgl_dp           DateTime? @db.Date
  sisa             String?   @db.VarChar(255)
  pelunasan        String?   @db.VarChar(255)
  biaya_tambahan   String?   @db.VarChar(255)
  tgl_lunas        DateTime? @db.Date
  tgl_invoice      DateTime? @db.Date
  status           String?   @db.VarChar(255)
  statusm          String?   @db.VarChar(255)
  approval         String?   @db.VarChar(255)
  approve_mng      String?   @db.VarChar(255)
  approval_barang  String?   @db.VarChar(255)
  approval_opr     String?   @db.VarChar(255)
  opr_id           String?
  userId           String?   @map("userId")
  print_id         String?
  press_id         String?
  cutting_id       String?
  dtf_id           String?
  penyerahan_id    String?
  designer_id      String?
  manager_id       String?
  customerId       BigInt?   @map("customer_id")
  rip              String?   @db.VarChar(255)
  produk           String?   @db.VarChar(255)
  path             String?   @db.VarChar(255)
  tf_dp            String?   @db.VarChar(255)
  tf_pelunasan     String?   @db.VarChar(255)
  tf_full          String?   @db.VarChar(255)
  catatan_tf       String?
  capture          String?   @db.VarChar(255)
  capture_name     String?   @db.VarChar(255)
  nama_kain        String?   @db.VarChar(255)
  jumlah_kain      String?   @db.VarChar(255)
  tipe_produk      String?   @db.VarChar(255)
  qty              String?   @db.VarChar(255)
  kategori         String?   @db.VarChar(255)
  gramasi          String?   @db.VarChar(255)
  nama_produk      String?   @db.VarChar(255)
  catatan          String?
  catatan_print    String?
  catatan_press    String?
  catatan_cutting  String?
  lebar_file       String?   @db.VarChar(255)
  est_order        DateTime? @db.Date
  no_project       String?   @db.VarChar(255)
  warna_acuan      String?   @db.VarChar(255)
  statusprod       String?   @db.VarChar(255)
  lebar_kain       String?   @db.VarChar(255)
  prioritas        String?   @db.VarChar(255)
  prints_mesin     String?   @db.VarChar(255)
  prints_icc       String?   @db.VarChar(255)
  prints_target    String?   @db.VarChar(255)
  dimensi_file     String?   @db.VarChar(255)
  prints_qty       String?   @db.VarChar(255)
  total_kertas     String?   @db.VarChar(255)
  prints_bagus     String?   @db.VarChar(255)
  prints_reject    String?   @db.VarChar(255)
  prints_waste     String?   @db.VarChar(255)
  press_mesin      String?   @db.VarChar(255)
  press_presure    String?   @db.VarChar(255)
  press_suhu       String?   @db.VarChar(255)
  press_speed      Float?
  press_protect    String?   @db.VarChar(255)
  total_kain       String?   @db.VarChar(255)
  press_bagus      String?   @db.VarChar(255)
  press_reject     String?   @db.VarChar(255)
  press_waste      String?   @db.VarChar(255)
  printd_mesin     String?   @db.VarChar(255)
  printd_icc       String?   @db.VarChar(255)
  pet              String?   @db.VarChar(255)
  suhu_meja        String?   @db.VarChar(255)
  printd_speed     String?   @db.VarChar(255)
  white_setting    String?   @db.VarChar(255)
  choke            String?   @db.VarChar(255)
  white_precentage String?   @db.VarChar(255)
  total_pet        String?   @db.VarChar(255)
  cutting_mesin    String?   @db.VarChar(255)
  cutting_speed    String?   @db.VarChar(255)
  acc              String?   @db.VarChar(255)
  power            String?   @db.VarChar(255)
  cutting_bagus    String?   @db.VarChar(255)
  cutting_reject   String?   @db.VarChar(255)
  tgl_pengiriman   DateTime? @db.Date
  tambah_bahan     String?
  tambah_cutting   String?   @db.VarChar(255)
  tambah_cutting1  String?   @db.VarChar(255)
  tambah_cutting2  String?   @db.VarChar(255)
  tambah_cutting3  String?   @db.VarChar(255)
  tambah_cutting4  String?   @db.VarChar(255)
  tambah_cutting5  String?   @db.VarChar(255)
  satuan_bahan     String?   @db.VarChar(255)
  satuan_cutting   String?   @db.VarChar(255)
  satuan_cutting1  String?   @db.VarChar(255)
  satuan_cutting2  String?   @db.VarChar(255)
  satuan_cutting3  String?   @db.VarChar(255)
  satuan_cutting4  String?   @db.VarChar(255)
  satuan_cutting5  String?   @db.VarChar(255)
  qty_bahan        String?   @db.VarChar(255)
  qty_cutting      String?   @db.VarChar(255)
  qty_cutting1     String?   @db.VarChar(255)
  qty_cutting2     String?   @db.VarChar(255)
  qty_cutting3     String?   @db.VarChar(255)
  qty_cutting4     String?   @db.VarChar(255)
  qty_cutting5     String?   @db.VarChar(255)
  total_bahan      String?   @db.VarChar(255)
  total_cutting    String?   @db.VarChar(255)
  total_cutting1   String?   @db.VarChar(255)
  total_cutting2   String?   @db.VarChar(255)
  total_cutting3   String?   @db.VarChar(255)
  total_cutting4   String?   @db.VarChar(255)
  total_cutting5   String?   @db.VarChar(255)
  nominal_total    String?   @db.VarChar(255)
  no               Int?
  nospk            Int?
  catatan_design   String?
  tgl_app_cs       DateTime? @db.Timestamp(6)
  tgl_app_prod     DateTime? @db.Timestamp(6)
  tgl_app_manager  DateTime? @db.Timestamp(6)
  diskon           String?   @db.VarChar(255)
  tambah_produk    String?   @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(6)
  updated_at       DateTime? @db.Timestamp(6)
  asal_bahan_id    BigInt?   @map("asal_bahan")
  jns_produk_id    Int?
  tgl_print        DateTime? @db.Date
  tgl_cutting      DateTime? @db.Date
  tgl_dtf          DateTime? @db.Date
  tgl_press        DateTime? @db.Date
  waktu_rip        DateTime? @db.Time(6)
  cutting_done     DateTime? @db.Date
  dtf_done         DateTime? @db.Date
  press_done       DateTime? @db.Date
  print_done       DateTime? @db.Date
  asal_bahan_rel   customer? @relation("AsalBahanCustomer", fields: [asal_bahan_id], references: [id])
  customer         customer? @relation("CustomerOrders", fields: [customerId], references: [id])
  cutting          User?     @relation("OrderCutting", fields: [cutting_id], references: [id])
  designer         User?     @relation("OrderDesigner", fields: [designer_id], references: [id])
  dtf              User?     @relation("OrderDTF", fields: [dtf_id], references: [id])
  produk_rel       Produk?   @relation("ProdukOrders", fields: [jns_produk_id], references: [id])
  manager          User?     @relation("OrderManager", fields: [manager_id], references: [id])
  operator         User?     @relation("OrderOperator", fields: [opr_id], references: [id])
  penyerahan       User?     @relation("OrderPenyerahan", fields: [penyerahan_id], references: [id])
  press            User?     @relation("OrderPress", fields: [press_id], references: [id])
  print            User?     @relation("OrderPrint", fields: [print_id], references: [id])
  user             User?     @relation("UserCreatedOrders", fields: [userId], references: [id])

  @@map("orders")
}

model Produk {
  id          Int      @id @default(autoincrement())
  nama_produk String?  @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  orders      Order[]  @relation("ProdukOrders")
}

model PaperStock {
  id              String                @id @default(cuid())
  name            String
  type            String
  manufacturer    String?
  width           Float
  height          Float
  length          Float?
  gsm             Int
  thickness       Float?
  remainingLength Float?
  addedByUserId   String
  updatedByUserId String?
  takenByUserId   String?
  dateAdded       DateTime              @default(now())
  dateUpdated     DateTime?
  dateTaken       DateTime?
  approved        Boolean               @default(false)
  notes           String?
  qrCode          String?               @unique
  paperRequestId  String?               @unique
  availability    InventoryAvailability @default(YES)
  paperLogs       PaperLog[]
  addedByUser     User                  @relation("UserAddedPaper", fields: [addedByUserId], references: [id])
  paperRequest    PaperRequest?         @relation(fields: [paperRequestId], references: [id])
  takenByUser     User?                 @relation("UserTookPaper", fields: [takenByUserId], references: [id])
  updatedByUser   User?                 @relation("UserUpdatedPaper", fields: [updatedByUserId], references: [id])

  @@map("paper_stocks")
}

model PaperRequest {
  id             String      @id @default(cuid())
  requested_by   String
  gsm            String
  width          String
  length         String
  user_notes     String?
  status         String      @default("PENDING")
  approved_by    String?
  rejected_by    String?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  paper_stock_id String?     @unique
  paper_type     String      @default("Sublimation Paper")
  logs           PaperLog[]
  approver       User?       @relation("UserApprovedPaper", fields: [approved_by], references: [id])
  rejecter       User?       @relation("UserRejectedPaper", fields: [rejected_by], references: [id])
  requester      User        @relation("UserRequestedPaper", fields: [requested_by], references: [id])
  paper_stock    PaperStock?

  @@map("paper_requests")
}

model PaperLog {
  id             String        @id @default(cuid())
  action         String
  performed_by   String
  notes          String?
  created_at     DateTime      @default(now())
  paper_stock_id String?
  request_id     String?
  paper_stock    PaperStock?   @relation(fields: [paper_stock_id], references: [id])
  user           User          @relation(fields: [performed_by], references: [id])
  request        PaperRequest? @relation(fields: [request_id], references: [id])

  @@map("paper_logs")
}

model InkStock {
  id              String                @id @default(cuid())
  barcode_id      String                @unique
  name            String
  color           String
  type            String
  quantity        Float
  unit            String
  supplier        String?
  added_by        String
  updatedByUserId String?
  takenByUserId   String?
  dateAdded       DateTime              @default(now())
  dateUpdated     DateTime?
  dateTaken       DateTime?
  notes           String?
  approved        Boolean               @default(false)
  availability    InventoryAvailability @default(YES)
  inkRequestId    String?               @unique
  inkLogs         InkLog[]
  addedByUser     User                  @relation("UserAddedInk", fields: [added_by], references: [id])
  inkRequest      InkRequest?           @relation(fields: [inkRequestId], references: [id])
  takenByUser     User?                 @relation("UserTookInk", fields: [takenByUserId], references: [id])
  updatedByUser   User?                 @relation("UserUpdatedInk", fields: [updatedByUserId], references: [id])

  @@map("ink_stocks")
}

model InkRequest {
  id           String    @id @default(cuid())
  requested_by String
  ink_type     String
  color        String
  quantity     Float
  unit         String
  user_notes   String?
  status       String    @default("PENDING")
  approved_by  String?
  rejected_by  String?
  ink_stock_id String?   @unique
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  logs         InkLog[]
  approver     User?     @relation("UserApprovedInk", fields: [approved_by], references: [id])
  rejecter     User?     @relation("UserRejectedInk", fields: [rejected_by], references: [id])
  requester    User      @relation("UserRequestedInk", fields: [requested_by], references: [id])
  ink_stock    InkStock?

  @@map("ink_requests")
}

model InkLog {
  id           String      @id @default(cuid())
  action       String
  performed_by String
  notes        String?
  ink_stock_id String?
  request_id   String?
  created_at   DateTime    @default(now())
  ink_stock    InkStock?   @relation(fields: [ink_stock_id], references: [id])
  user         User        @relation("UserInkLogs", fields: [performed_by], references: [id])
  request      InkRequest? @relation(fields: [request_id], references: [id])

  @@map("ink_logs")
}

model OtherConsumable {
  id           String                @id @default(cuid())
  name         String
  type         String?
  quantity     String?
  unit         String?
  supplier     String?
  added_by     String
  notes        String?
  availability InventoryAvailability @default(YES)
  created_at   DateTime              @default(now())
  updated_at   DateTime              @updatedAt
  user         User                  @relation("UserAddedConsumable", fields: [added_by], references: [id])
}

model Asset {
  id            String    @id @default(cuid())
  name          String
  type          String?
  serial_number String?
  purchase_date DateTime?
  supplier      String?
  value         Decimal?
  status        String?
  location      String?
  notes         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

enum PaperRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InventoryAvailability {
  YES
  NO
}

model OthersItem {
  id              String                @id @default(cuid())
  qr_code         String?               @unique
  category        String
  item_name       String
  description     String?
  quantity        Int
  unit            String
  location        String?
  notes           String?
  availability    Boolean               @default(true)
  user_id         String
  taken_by_user_id String?
  taken_at        DateTime?
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  user            User                  @relation("UserAddedOthersItem", fields: [user_id], references: [id])
  taken_by_user   User?                 @relation("UserTookOthersItem", fields: [taken_by_user_id], references: [id])
  logs            OthersLog[]           @relation("OthersItemLogs")

@@map("others_item")
}

model OthersRequest {
  id               String    @id @default(cuid())
  user_id          String
  category         String
  item_name        String
  quantity         Int
  unit             String
  user_notes       String?
  status           String    @default("PENDING")
  approver_id      String?
  rejector_id      String?
  approved_at      DateTime?
  rejected_at      DateTime?
  approver_notes   String?
  rejection_reason String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  logs             OthersLog[] @relation("OthersRequestLogs")
  user             User      @relation("UserRequestedOthers", fields: [user_id], references: [id])
  approver         User?     @relation("UserApprovedOthers", fields: [approver_id], references: [id])
  rejector         User?     @relation("UserRejectedOthers", fields: [rejector_id], references: [id])

 @@map("others_requests")
}

model OthersLog {
  id                String        @id @default(cuid())
  action            String
  user_id           String
  others_request_id String?
  others_item_id    String?
  notes             String?
  created_at        DateTime      @default(now())
  user              User          @relation("UserOthersLogs", fields: [user_id], references: [id])
  others_request    OthersRequest? @relation("OthersRequestLogs", fields: [others_request_id], references: [id])
  others_item       OthersItem?   @relation("OthersItemLogs", fields: [others_item_id], references: [id])

@@map("others_log")
}
